#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
void helper_left(TreeNode<int>*root,vector<int>&ans)
{
    if(root==NULL) return;
    TreeNode<int>* curr=root;
    while(curr->left!=NULL || curr->right!=NULL)
    {
        ans.push_back(curr->data);
        if(curr->left) curr=curr->left;
        else curr=curr->right;
    }
}
void helper_leaf(TreeNode<int>*root,vector<int>&ans)
{
    if(root==NULL) return;
    if(root->left==NULL && root->right==NULL)
    {
        ans.push_back(root->data);
        return;
    }
    helper_leaf(root->left,ans);
    helper_leaf(root->right,ans);
}

void helper_right(TreeNode<int>*root,vector<int>&ans)
{
    if(root==NULL) return;
    vector<int>temp;
    TreeNode<int>* curr=root;
    while(curr->left!=NULL || curr->right!=NULL)
    {
        temp.push_back(curr->data);
        if(curr->right) curr=curr->right;
        else curr=curr->left;
    }

    for(int i=temp.size()-1;i>=0;--i) ans.push_back(temp[i]);
}

vector<int> traverseBoundary(TreeNode<int>* root){
    // Write your code here.
    vector<int>ans;
    if(root==NULL) return ans;
    ans.push_back(root->data);
    if(root->left==NULL && root->right==NULL) return ans;
    if(root->left) helper_left(root->left,ans);

    helper_leaf(root,ans);
    if(root->right) helper_right(root->right,ans);
    return ans;
}
