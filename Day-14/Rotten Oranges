class Solution {
public:
    int dir[5]={-1,0,1,0,-1};
    int orangesRotting(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>>time(m,vector<int>(n,INT_MAX));

        bool flag=false;
        int total=0;
        queue<pair<int,int>>q;
        for(int i=0;i<m;++i)
        {
            for(int j=0;j<n;++j)
            {
                if(grid[i][j]==2)
                {
                    flag=true;
                    q.push({i,j});
                    time[i][j]=0;
                }   
                else if(grid[i][j]==1) total++;
            }
        }
        if(total==0) return 0;
        if(!flag) return -1;
        while(!q.empty())
        {
            auto x=q.front();
            q.pop();
            int i=x.first;
            int j=x.second;

            for(int l=0;l<4;++l)
            {
                int newi=i+dir[l];
                int newj=j+dir[l+1];
                if(newi>=0 && newi<m && newj>=0 && newj<n && grid[newi][newj]==1 && time[newi][newj]>(1+time[i][j]))
                {
                    time[newi][newj]=(1+time[i][j]);
                    q.push({newi,newj});
                }
            }
        }

        int mx=0;
        for(int i=0;i<m;++i)
        {
            for(int j=0;j<n;++j)
            {
                if(grid[i][j]==1) mx=max(mx,time[i][j]);
            }
        }
        if(mx==INT_MAX) return -1;
        return mx;

    }
};
