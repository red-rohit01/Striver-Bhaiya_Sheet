class TrieNode{
  public:
    TrieNode* children[26];
    int ew=0;
    int cprefix=0;
    bool ispresent(char ch)
    {
        return (children[ch-'a']!=NULL);
    }
    TrieNode* get(char ch)
    {
        return children[ch-'a'];
    }
    void assign(char ch,TrieNode* t)
    {
        children[ch-'a']=t;
    }
    
};
class Trie{
   TrieNode* root;
    public:

    Trie(){
        // Write your code here.
        root=new TrieNode();
    }

    void insert(string &word){
        // Write your code here.
        TrieNode *temp=root;
        for(int i=0;i<word.size();i++)
        {
            if(!temp->ispresent(word[i]))
        {
            temp->assign(word[i],new TrieNode);
             
        }
            temp=temp->get(word[i]);
            temp->cprefix++;
        }
       temp->ew++; 
    }

    int countWordsEqualTo(string &word){
        // Write your code here.
        TrieNode *temp=root;
        for(auto ch:word)
        {
            if(temp->ispresent(ch))
            {
                 temp=temp->get(ch);
            }
           else{
               return 0;
           }
        }
        return temp->ew;
    }

    int countWordsStartingWith(string &word){
        // Write your code here.
        TrieNode *temp=root;
        for(auto ch:word)
        {
            if(temp->ispresent(ch))
            {
                 temp=temp->get(ch);
            }
           else{
               return 0;
           }
        }
        return temp->cprefix;
    }

    void erase(string &word){
        // Write your code here.
        TrieNode *temp=root;
        for(auto ch:word)
        {
            if(temp->ispresent(ch))
            {
                 temp=temp->get(ch);
               temp-> cprefix--;
            }
           else{
               return ;
           }
        }
        temp->ew--;
       
    }
};
