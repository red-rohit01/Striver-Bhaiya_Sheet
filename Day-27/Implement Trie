struct node{
    node* links[26];
    int ew=0;
    int cp=0;

    bool containskey(char ch)
    {
        return (links[ch-'a']!=NULL);
    }
    void put(char ch,node* l)
    {
        links[ch-'a']=l;
    }
    node* get(char ch)
    {
        return links[ch-'a'];
    }
};
class Trie {
public:
    node* root;
    Trie() {
        root=new node();
    }
    
    void insert(string word) {
        node* temp=root;
        int l=word.size();
        for(int i=0;i<l;++i)
        {
            if(!temp->containskey(word[i]))
            {
                temp->put(word[i],new node());
            }
            temp=temp->get(word[i]);
            temp->cp++;
        }
        temp->ew++;
    }
    
    bool search(string word) {
        node* temp=root;
        int l=word.size();
        for(int i=0;i<l;++i)
        {
            if(!temp->containskey(word[i])) return false;
            temp=temp->get(word[i]);
        }
        return (temp->ew >0);
    }
    
    bool startsWith(string prefix) {
        node* temp=root;
        int l=prefix.size();
        for(int i=0;i<l;++i)
        {
            if(temp->get(prefix[i])==NULL) return false;
            temp=temp->get(prefix[i]);
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
